package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /** Internal information */
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;

    /** Currently stored tuple */
    private Tuple t;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.t = null;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (this.t == null) {
            if (child1.hasNext()) {
                this.t = child1.next();
            } else {
                // nothing left
                return null;
            }
        }
        
        // the nested loop join
        Tuple to;
        while (child1.hasNext() || child2.hasNext()) {
            if (child2.hasNext()) {
                to = child2.next();
                // if t == t2
                if (p.filter(t, to)) {
                    Tuple res = combine(t, to);
                    return res;
                }
            } else {
                // finished, advance child1 and reset child2
                t = child1.next();
                child2.rewind();
            }
        }

        // nothing left
        return null;
    }

    // Combines two tuples into one
    private Tuple combine(Tuple t1, Tuple t2) {
        Tuple res = new Tuple(getTupleDesc());
        int t1Num = t1.getTupleDesc().numFields();
        int t2Num = t2.getTupleDesc().numFields();

        // gather t1 fields
        for (int i = 0; i < t1Num; i++) {
            res.setField(i, t1.getField(i));
        }

        // then t2 fields
        for (int i = t1Num; i < t1Num + t2Num; i++) {
            res.setField(i, t2.getField(i - t1Num));
        }

        return res;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
